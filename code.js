// =================================================================
// 1. KHAI B√ÅO C√ÅC PH·∫¶N T·ª¨ HTML C·∫¶N C·∫¨P NH·∫¨T
// =================================================================

const pokemonDataElement = document.getElementById('pokemon-data');
const weatherDataContainer = document.getElementById('weather-data'); // V·ªã tr√≠ ch·ª©a th√¥ng b√°o t·∫£i/l·ªói
const weatherIconElement = document.getElementById('weather-icon');
const weatherDetailsElement = document.getElementById('weather-details');
const pokemonName = document.getElementById('pokemon-name');
const exchangeRateDataElement = document.getElementById('exchange-rate-data');
const refreshExchangeButton = document.getElementById('refresh-exchange-btn');

document.addEventListener('DOMContentLoaded', () => {
    const pokemonInput = document.getElementById('pokemon-name');
    pokemonInput.addEventListener('change', () => {
        const name = pokemonInput.value.toLowerCase();
        fetchPokemon(name)
    });

});

// =================================================================
// 2. X·ª¨ L√ù POKEAPI (PIKACHU)
// =================================================================

async function fetchPokemon(pokemonName) {
    const url = `https://pokeapi.co/api/v2/pokemon/${pokemonName}`;
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`L·ªói HTTP: ${response.status}`);
        }
        const data = await response.json();
        displayPokemon(data);
    } catch (error) {
        pokemonDataElement.innerHTML = `<p>Kh√¥ng c√≥ d·ªØ li·ªáu!</p>`;
    }
}

function displayPokemon(data) {
    const html = `
        <div style="display: flex; align-items: center;">
            <img src="${data.sprites.front_default}" alt="${data.name}" style="width: 80px; margin-right: 15px;">
            <div>
                <p><strong>T√™n:</strong> ${data.name.toUpperCase()}</p>
                <p><strong>ID:</strong> #${data.id}</p>
                <p><strong>Nguy√™n t·ªë:</strong> ${data.types[0].type.name.toUpperCase()}</p>
                <p><strong>Ch·ªâ s·ªë:</strong></p>
                <ul>
                    <li>${data.stats[0].stat.name.toUpperCase()}: ${data.stats[0].base_stat}</li>
                    <li>${data.stats[1].stat.name.toUpperCase()}: ${data.stats[1].base_stat}</li>
                    <li>${data.stats[2].stat.name.toUpperCase()}: ${data.stats[2].base_stat}</li>
                </ul>
            </div>
        </div>
    `;
    pokemonDataElement.innerHTML = html;
}


// =================================================================
// 3. X·ª¨ L√ù OPEN-METEO (TH·ªúI TI·∫æT)
// =================================================================

/**
 * √Ånh x·∫° m√£ th·ªùi ti·∫øt (WMO Code) th√†nh m√¥ t·∫£ v√† bi·ªÉu t∆∞·ª£ng.
 * Ngu·ªìn m√£: https://open-meteo.com/en/docs
 */
function getWeatherDescription(code) {
    let description;
    let icon;

    // C√°c tr∆∞·ªùng h·ª£p th·ªùi ti·∫øt ph·ªï bi·∫øn (bi·ªÉu di·ªÖn c√°c d·∫°ng kh√°c nhau)
    if (code === 0) {
        description = 'Tr·ªùi quang m√¢y';
        icon = '‚òÄÔ∏è';
    } else if (code >= 1 && code <= 3) {
        description = 'Ch·ªß y·∫øu quang m√¢y ƒë·∫øn nhi·ªÅu m√¢y';
        icon = 'üå§Ô∏è';
    } else if (code >= 45 && code <= 48) {
        description = 'S∆∞∆°ng m√π/Kh√≥i b·ª•i';
        icon = 'üå´Ô∏è';
    } else if (code >= 51 && code <= 55) {
        description = 'M∆∞a ph√πn (nh·∫π ƒë·∫øn d√†y)';
        icon = 'üåßÔ∏è';
    } else if (code >= 61 && code <= 65) {
        description = 'M∆∞a (nh·∫π ƒë·∫øn l·ªõn)';
        icon = '‚òî';
    } else if (code >= 71 && code <= 75) {
        description = 'Tuy·∫øt (nh·∫π ƒë·∫øn d√†y)';
        icon = '‚ùÑÔ∏è';
    } else if (code >= 95 && code <= 99) {
        description = 'Gi√¥ng b√£o';
        icon = '‚ö°‚õàÔ∏è';
    } else {
        description = 'Th·ªùi ti·∫øt kh√°c (Code: ' + code + ')';
        icon = '‚ùì';
    }
    return { description, icon };
}

async function fetchWeather(latitude, longitude) {
    const url = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true`;
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`L·ªói HTTP: ${response.status}`);
        }
        const data = await response.json();
        displayWeather(data.current_weather, latitude, longitude);
    } catch (error) {
        weatherDataContainer.innerHTML = `<p style="color: red;">‚ùå L·ªói: Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu th·ªùi ti·∫øt. (${error.message})</p>`;
    }
}

function displayWeather(currentWeather, lat, lon) {
    const { temperature, windspeed, weathercode } = currentWeather;
    const { description, icon } = getWeatherDescription(weathercode);

    weatherIconElement.innerHTML = icon;

    weatherDetailsElement.innerHTML = `
        <p><strong>V·ªã tr√≠:</strong> Vƒ© ƒë·ªô: ${lat.toFixed(2)} / Kinh ƒë·ªô: ${lon.toFixed(2)}</p>
        <p><strong>T√¨nh tr·∫°ng:</strong> ${description}</p>
        <p><strong>Nhi·ªát ƒë·ªô:</strong> ${temperature} ¬∞C</p>
        <p><strong>T·ªëc ƒë·ªô gi√≥:</strong> ${windspeed} km/h</p>
    `;
    weatherDataContainer.innerHTML = ''; // X√≥a th√¥ng b√°o t·∫£i
}

function getLocationAndFetchWeather() {
    weatherDataContainer.innerHTML = `<p>üåç ƒêang t√¨m ki·∫øm v·ªã tr√≠...</p>`;

    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                const { latitude, longitude } = position.coords;
                weatherDataContainer.innerHTML = `<p>üì° ƒê√£ t√¨m th·∫•y v·ªã tr√≠. ƒêang t·∫£i d·ªØ li·ªáu...</p>`;
                fetchWeather(latitude, longitude);
            },
            (error) => {
                weatherDataContainer.innerHTML = `<p style="color: orange;">‚ö†Ô∏è L·ªói truy c·∫≠p v·ªã tr√≠. ƒêang d√πng v·ªã tr√≠ m·∫∑c ƒë·ªãnh (H√† N·ªôi)...</p>`;
                // S·ª≠ d·ª•ng v·ªã tr√≠ m·∫∑c ƒë·ªãnh (H√† N·ªôi) n·∫øu ng∆∞·ªùi d√πng t·ª´ ch·ªëi ho·∫∑c c√≥ l·ªói
                fetchWeather(21.0285, 105.8542);
            }
        );
    } else {
        weatherDataContainer.innerHTML = `<p style="color: red;">‚ùå Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ Geolocation. ƒêang d√πng v·ªã tr√≠ m·∫∑c ƒë·ªãnh (H√† N·ªôi)...</p>`;
        fetchWeather(21.0285, 105.8542);
    }
}

// =================================================================
// 4. X·ª¨ L√ù EXCHANGE RATE API (USD/VND)
// =================================================================

async function fetchExchangeRate() {
    exchangeRateDataElement.innerHTML = `<p>üîÑ ƒêang t·∫£i t·ª∑ gi√°...</p>`;
    const url = 'https://v6.exchangerate-api.com/v6/50cae54a97545dfca07872f9/latest/USD';

    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`L·ªói HTTP: ${response.status}`);
        }
        const data = await response.json();

        // Tr√≠ch xu·∫•t t·ª∑ gi√° VND
        const vndRate = data.conversion_rates.VND;

        if (vndRate) {
            exchangeRateDataElement.innerHTML = `
                <p style="font-size: 1.2em; text-align: center;">
                    <strong>1 USD</strong> = <strong>${vndRate.toFixed(0)} VND</strong>
                </p>
                <p style="font-size: 0.8em; text-align: center; color: #ccc;">
                    (C·∫≠p nh·∫≠t: ${new Date(data.time_last_update_utc).toLocaleDateString()})
                </p>
            `;
        } else {
            throw new Error("Kh√¥ng t√¨m th·∫•y t·ª∑ gi√° VND.");
        }

    } catch (error) {
        exchangeRateDataElement.innerHTML = `<p>Kh√¥ng c√≥ d·ªØ li·ªáu!</p>`;
    }
}

// =================================================================
// 5. CH·∫†Y KHI TRANG T·∫¢I XONG
// =================================================================

document.addEventListener('DOMContentLoaded', () => {
    fetchPokemon();
    getLocationAndFetchWeather();
    fetchExchangeRate();
});

// TRONG FILE script.js HO·∫∂C code.js

document.addEventListener('DOMContentLoaded', () => {

    const globalRefreshButton = document.getElementById('global-refresh-btn');

    if (globalRefreshButton) {
        globalRefreshButton.addEventListener('click', () => {
            // L·ªánh quan tr·ªçng: T·∫£i l·∫°i trang web
            location.reload();
        });
    }
});